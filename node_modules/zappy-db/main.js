function DAO() {

	console.log("about to open the database...");
	var Datastore = require('nedb');
	this.db = {};
	var self = this;

	this.db.profiles = new Datastore({
		filename : 'profiles.db',
		nodeWebkitAppName : 'zappyglasses'
	});
	this.db.files = new Datastore({
		filename : 'files.db',
		nodeWebkitAppName : 'zappyglasses'
	});
}

DAO.prototype._loadDatabase = function() {
	console.log("loading database...");
	var self = this;
	this.db.profiles.loadDatabase(function(err) {
		self.messenger.emit('dbready', 'profiles');
		console.log('Database profiles finished loading.');
		if (err !== undefined) {
			console.log('Failed to load profiles database: ' + err);
		}
	});

	this.db.files.loadDatabase(function(err) {
		self.messenger.emit('dbready', 'files');
		console.log('Database files finished loading.');
		if (err !== undefined) {
			console.log('Failed to load files database: ' + err);
		}
	});
}

DAO.prototype.getFilePath = function(id, callback) {
	this.db.files.find({
		_id : id
	}, function(err, docs) {
		if (err !== null) {
			console.log("DB error = " + err);
			callback(0, undefined);
		} else {
			callback(1, docs[0].path);
			console
					.log("Data found for Id = " + id + " file = "
							+ docs[0].path);
		}
	});
}

DAO.prototype.saveFilePath = function(path, callback) {
	var filesDB = this.db.files;
	filesDB.find({
		path : path
	}, function(err, docs) {
		if (err !== null) {
			callback(0, undefined);
		} else {
			if (docs === null || docs.length === 0) {
				var doc = {};
				doc.path = path;
				doc.usedTime = new Array();
				doc.usedTime.push(new Date().getTime());
				filesDB.insert(doc, function(err, newDoc) {
					if (err !== null) {
						console.log("DB error = " + err);
						callback(0, undefined);
					} else {
						callback(1, newDoc._id);
						console.log("File added = " + newDoc);
					}
				});
			} else {
				var doc = docs[0];
				doc.usedTime.push(new Date().getTime());

				filesDB.update({
					_id : doc._id
				}, doc, {}, function(err, numReplaced) {
					if (err !== null) {
						console.log("DB error = " + err);
						callback(0, undefined);
					} else {
						callback(1, doc._id);
						console.log("Updated row (" + numReplaced + ") = "
								+ doc._id);
					}
				});
			}
		}
	});
}

DAO.prototype.getZappyGlass = function(id, callback) {
	this.db.profiles.find({
		_id : id
	}, function(err, docs) {
		if (err !== null) {
			console.log("DB error = " + err);
			callback(0, undefined);
		} else {
			callback(1, docs[0]);
			console.log("Found for Id = " + id + " glass = " + docs[0]);
		}
	});
}

DAO.prototype.getExistingZappyGlass = function(ip, port, callback) {
	this.db.profiles.findOne({
		ip : ip,
		port : port
	}, function(err, doc) {
		if (err !== null) {
			console.log("DB error = " + err);
			callback(0, undefined);
		} else {
			callback(1, doc);
			console.log("Found for ip = " + ip + " and port = " + port
					+ " glass = " + doc);
		}
	});
}

DAO.prototype.getAllZappyGlasses = function(callback) {
	console.log(this.db.profiles.getAllData());
	this.db.profiles.find({}, function(err, docs) {
		if (err !== null) {
			console.log("DB error = " + err);
			callback(0, undefined);
		} else {
			callback(1, docs);
			console.log("All glasses = " + docs);
		}
	});
}

DAO.prototype.saveZappyGlass = function(glass, callback) {

	this.db.profiles.insert(glass, function(err, newDoc) {
		if (err !== null) {
			console.log("DB error = " + err);
			callback(0, undefined);
		} else {
			callback(1, newDoc);
			console.log("Glass inserted = " + newDoc);
		}
	});
}

DAO.prototype.deleteZappyGlass = function(glassId, callback) {
	this.db.profiles.remove({
		_id : glassId
	}, {}, function(err, numRemoved) {
		if (err !== null) {
			console.log("DB error = " + err);
			callback(0);
		} else if (numRemoved == 0) {
			callback(2);
			console.log("Unable to delete, Glass not found for Id = " + glassId);
		} else {
			callback(1);
			console.log("Glass deleted for Id = " + glassId);
		}
	});
}
var emitter = require('events').EventEmitter;
DAO.prototype.messenger = null;

var dao = new DAO();
dao.DAO = DAO;
dao.messenger = new emitter();
dao._loadDatabase();

module.exports = dao;
