/*
 * This is just a temporary solution to cache dropped filePath.
 * 
 * PouchDB is at last chosen for this job... it will also include a layer of caching. 
 * DB will mainly be used for saving XBMC settings and 
 */

function DAO() {
	console.log("about to open the database...")
	this.files = Pouch('ZappyFiles');
	this.glasses = Pouch('ZappyGlasses');
}

DAO.prototype.clean = function() {
}

DAO.prototype.getFilePath = function(id, callback) {
	this.files.get(id, function(err, fileData) {
		callback(fileData.path);
		console.log("Data found for Id = " + id + " file = " + fileDetails);
	});
}

DAO.prototype.saveFilePath = function(filePath, callback) {
	var currTime = new Date().getTime();
	var fileData = new Object();
	fileData.path = filePath;
	fileDate.usedTime = currTime;

	this.files.post(fileDate, function(err, resp) {
		callback(resp._id);
		console.log("Data resp = " + resp + " file = " + fileDetails);
	});
}

DAO.prototype.getZappyGlass = function(id, callback) {
	this.glasses.get(id, function(err, glass) {
		callback(glass.ip, glass.port);
		console.log("Data found for Id = " + id + " glass = " + glass);
	});
}

DAO.prototype.getAllZappyGlasses = function(callback) {
	this.glasses.allDocs(function(err, glasses) {
		var glassesObj = new Array();
		for(glass in glasses){
			var glassObj = new Object();
			glassObj.name = glass._id;
			glassObj.ip = glass.ip;
			glassObj.port = glass.port;
			glassesObj[glassesObj.length] = glassObj;
		}
		callback(glassesObj);
		console.log("Data found for glasses = " + glassesObj);
	});
}

DAO.prototype.saveZappyGlass = function(name, ip, port, callback) {
	var currTime = new Date().getTime();
	var glass = new Object();
	glass._id = name;
	glass.ip = ip;
	glass.port = port;

	this.glasses.put(glass, function(err, resp) {
		callback(resp._id);
		console.log("Data resp = " + resp + " file = " + glass);
	});
}

var dao = new DAO();
dao.clean();

dao.DAO = DAO;
module.exports = dao;
